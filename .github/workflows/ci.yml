# CI/CD Pipeline
# Runs on every push and pull request to ensure code quality and correctness

name: CI

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'
  POETRY_VERSION: '1.7.0'

jobs:
  # Job 1: Linting and Code Quality
  lint:
    name: Lint (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Run Black (code formatting check)
        run: black --check --line-length=100 .

      - name: Run isort (import sorting check)
        run: isort --check --profile=black --line-length=100 .

      - name: Run Flake8 (linting)
        run: flake8 --max-line-length=100 --extend-ignore=E203,W503 .

      - name: Run MyPy (type checking)
        run: mypy --config-file=mypy.ini .
        continue-on-error: true  # Don't fail build on type errors initially

      - name: Run Bandit (security checks)
        run: bandit -c pyproject.toml -r .
        continue-on-error: true  # Don't fail build on security warnings initially

  # Job 2: Test Suite with Coverage
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']
      fail-fast: false  # Continue testing other versions even if one fails

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: pulsewatch_test
          MYSQL_USER: pulsewatch
          MYSQL_PASSWORD: pulsewatch
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot_password --silent; then
              echo "MySQL is ready"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done

      - name: Wait for Redis
        run: |
          for i in {1..30}; do
            if redis-cli -h 127.0.0.1 -p 6379 ping; then
              echo "Redis is ready"
              break
            fi
            echo "Waiting for Redis... ($i/30)"
            sleep 2
          done

      - name: Set up test environment
        run: |
          cp .env.example .env
          # Override with test database settings
          echo "DATABASE_URL=mysql://pulsewatch:pulsewatch@127.0.0.1:3306/pulsewatch_test" >> .env
          echo "REDIS_URL=redis://127.0.0.1:6379/0" >> .env
          echo "SECRET_KEY=test-secret-key-for-ci-testing-only-not-for-production" >> .env
          echo "DEBUG=False" >> .env
          echo "DJANGO_SETTINGS_MODULE=core.settings.test" >> .env

      - name: Run database migrations
        run: python manage.py migrate --noinput

      - name: Run tests with coverage
        run: |
          pytest \
            --cov=. \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            -v

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: matrix.python-version == '3.12'  # Only upload from one version
        with:
          name: coverage-report-python-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
          retention-days: 30

      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.12'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true  # Don't fail if codecov upload fails

  # Job 3: Docker Build Verification
  docker:
    name: Docker Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: pulsewatch:ci-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker build -t pulsewatch:test .
          # Test with overridden entrypoint to avoid running migrations
          docker run --rm --entrypoint python pulsewatch:test --version
          docker run --rm --entrypoint python pulsewatch:test -c "import django; print(f'Django {django.get_version()}')"
          echo "âœ… Docker image built successfully"

  # Job 4: Security and Dependency Checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Run safety check (dependency vulnerabilities)
        run: |
          pip install safety
          safety check --json || true
        continue-on-error: true

      - name: Run pre-commit hooks (comprehensive)
        run: |
          pre-commit install
          pre-commit run --all-files --config .pre-commit-config-ci.yaml || true
        continue-on-error: true

  # Summary Job: Require all checks to pass
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, test, docker]
    if: always()

    steps:
      - name: Check job results
        run: |
          if [ "${{ needs.lint.result }}" != "success" ]; then
            echo "Lint job failed"
            exit 1
          fi
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "Test job failed"
            exit 1
          fi
          if [ "${{ needs.docker.result }}" != "success" ]; then
            echo "Docker job failed"
            exit 1
          fi
          echo "All CI checks passed!"
